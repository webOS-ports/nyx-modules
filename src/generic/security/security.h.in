/* @@@LICENSE
*
*      Copyright (c) 2013 LG Electronics, Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
* LICENSE@@@ */
#ifndef _SECURITY_H_
#define _SECURITY_H_

#include <nyx/nyx_module.h>
#include <glib.h>
#include <openssl/evp.h>
#include <openssl/rsa.h>

#define SECURITY_KEYSTORE_DIR  "@WEBOS_INSTALL_WEBOS_KEYSDIR@"
#define SECURITY_KEYSTORE_PATH "@WEBOS_INSTALL_WEBOS_KEYSDIR@/keystore.conf"

struct aes_key_t
{
	int keylen; /**< key length (128, 192, 256 bits) */
	unsigned char key[EVP_MAX_KEY_LENGTH];
};

struct rsa_key_t
{
	int keylen;
	RSA *rsa;
};

struct keystore_t
{
	GHashTable *aes; /**< AES keys (index, aes_key_t*) */
	GHashTable *rsa; /**< RSA keys (index, rsa_key_t*) */
};

void aes_destroy_key(gpointer p);
void rsa_destroy_key(gpointer p);

extern struct keystore_t keystore;

int keystore_init(struct keystore_t *store);
void keystore_destroy(struct keystore_t *store);
gpointer keystore_key_lookup(GHashTable *keys, int index);
void keystore_key_replace(GHashTable *keys, gpointer key, int *index);
nyx_error_t keystore_load(struct keystore_t *keystore);
void keystore_save(struct keystore_t *keystore);
void keystore_dump(struct keystore_t *keystore);

nyx_error_t aes_generate_key(int keylen, int *index);
nyx_error_t aes_crypt(int index, int encrypt,
                      nyx_security_aes_block_mode_t mode, const char *src, int srclen, char *dest,
                      int *destlen, int *ivlen);

nyx_error_t rsa_generate_key(int keylen, int *key_index);
nyx_error_t rsa_crypt(int key_index, int encrypt, const char *src, int srclen,
                      char *dest, int *destlen);

nyx_error_t sha_init(const char *name);
nyx_error_t sha_update(const char *src, int srclen);
nyx_error_t sha_finalize(char *dest, int *destlen);

#endif
